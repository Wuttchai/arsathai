{"version":3,"sources":["Pager.tsx"],"names":["Clock","Animated","Value","onChange","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","TIMING_CONFIG","duration","easing","Easing","out","cubic","Pager","clock","velocityX","gestureX","gestureState","State","END","offsetX","progress","props","navigationState","index","layout","width","nextIndex","lastEnteredIndex","isSwiping","isSwipeGesture","routesLength","routes","length","layoutWidth","swipeVelocityImpact","position","springConfig","undefined","timingConfig","initialVelocityForSpring","currentIndexValue","pendingIndexValue","enterListeners","jumpToIndex","setValue","jumpTo","key","findIndex","route","onIndexChange","addListener","type","listener","push","removeListener","indexOf","splice","handleEnteredIndexChange","value","Math","forEach","transitionTo","toValue","frameTime","state","time","finished","I18nManager","isRTL","velocity","handleGestureEvent","nativeEvent","translationX","velocitySignum","extrapolatedPosition","translateX","forceUpdate","keyboardDismissMode","onSwipeStart","onSwipeEnd","Keyboard","dismiss","ACTIVE","getTranslateX","prevProps","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","render","styles","container","transform","React","Component","defaultProps","StyleSheet","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, I18nManager } from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\ntype Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.01;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<Props<T>> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n  };\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact != null\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.END);\n  private offsetX = new Value(0);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact || SWIPE_VELOCITY_IMPACT\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState } = this.props;\n\n    const index = navigationState.routes.findIndex(route => route.key === key);\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach(listener => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n        startClock(this.clock),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(this.initialVelocityForSpring, multiply(-1, this.velocityX))\n              : set(this.initialVelocityForSpring, this.velocityX)\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private velocitySignum = cond(\n    this.velocityX,\n    divide(abs(this.velocityX), this.velocityX),\n    0\n  );\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(\n      this.velocityX,\n      this.velocityX,\n      this.velocitySignum,\n      this.swipeVelocityImpact\n    )\n  );\n\n  private translateX = block([\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode, onSwipeStart, onSwipeEnd } = this.props;\n\n        if (value === TRUE) {\n          onSwipeStart && onSwipeStart();\n\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n        } else {\n          onSwipeEnd && onSwipeEnd();\n        }\n      })\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n\n      cond(eq(this.gestureState, State.END), [\n        set(this.isSwiping, FALSE),\n        this.transitionTo(\n          cond(\n            greaterThan(\n              abs(this.extrapolatedPosition),\n              divide(this.layoutWidth, 2)\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.velocitySignum, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ])\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <PanGestureHandler\n          enabled={layout.width !== 0 && swipeEnabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            {children}\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]}